						CRUD CON MYSQL Y GRAPHQL BY FAZT

Source: https://www.youtube.com/watch?v=8_DuZHJBB-k
Repo: https://github.com/FaztWeb/graphql-mysql-crud-typescript

IMPORTANTE: En este proyecto no voy a crear una REST API, sino una GRAPHQL API.
>npm i express express-graphql graphql mysql typeorm cors bcryptjs

Necesito graphql ya que es el core y express-graphql para construir una graphql api sobre express
<mysql> es el adaptador simplemente del ORM de turno al gestor
typeorm es un orm para usar con gestores SQL (si por ejemplo usará otro dialecto como postgresql habriá que instalar su adaptador correspondiente,ojo)

Y dado que vamos a usar typescript habrá que instalar varias dependencias en desarrollo y los @types:
npm i -D typescript ts-node-dev @types/bcryptjs @types/cors @types/express @types/node dotenv 

NOTA: recuerda que puedo usar npx para llamar a cualquier comando del proyecto:
npx tsc --init <- claro que yo ya lo tengo en global,pero la librería typescript que hemos instalado da acceso a este comando en el proyecto.

Fijate que crear un proyecto de typescript me obliga a crear este archivo,y a decirle donde compilará y donde está el proyecto:
 "rootDir":"./src",
 "outDir": "./dist"

				CONFIGURAR SERVIDOR EXPRESS JUNTO CON GRAPHQL   

 NOTA:no usar ts-node ya que ts-node-dev realiza seguimiento de los files que cambian y recompila de nuevo,algo que ts-node no hace.

Bien,lo primero de todo es saber que debo crear una url para sacar la interfaz gráfica de GRAPHQL llamada GraphiQL (puedo omitirlo con graphiql:false):

import express from 'express';
import { graphqlHTTP } from 'express-graphql';
const app = express();

app.use('/graphql', graphqlHTTP({
  graphiql: true,
  schema: schema
}));

IMPORTANTE: una API GRAPHQL me pedirá siempre un schema.El schema define las consultas que se pueden hacer,si son queries o mutation,etc..

Para crear un Schema minimo necesitaré una query:
import { GraphQLSchema,GraphQLObjectType } from 'graphql';

export const schema = new GraphQLSchema({
  query: RootQuery,
  // mutation: {}
});

Esa RootQuery es un GraphQLObjectType:
const RootQuery = new GraphQLObjectType({
  name: 'RootQueryType',
  fields: {
    greeting:GREETING
  }
}); 
Y ese GREETING luce asi:
import { GraphQLString } from "graphql"

/* una action siempre lleva el type y el resolve */
export const GREETING = {
  type: GraphQLString,
  resolve: () => "Hello World"
}

					CONECTAR MYSQL MEDIANTE TYPEORM
