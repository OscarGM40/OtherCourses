


 ESTRATEGIAS DE LOGEO CON PASSPORT JS- LOGIN CON GOOGLE-FACEBOOK-GITHUB-...


 Source: https://www.youtube.com/watch?v=7K9kDrtc4S8

 Con la librería passport-js puedo usar mas de 500 estrategias de autenticación.Veamos un ejemplo con Google,Facebook y Github.
 
 NOTA: ha salido la version 6 de ReactRouterDom.En ella hay algunos cambios:
 1- Ya no se usará <Switch>.En su lugar se llama <Routes> pero hace de Switch(englobará varios <Route>)
 2- En cada <Route> ya no se usa la propiedad component,se llama element.Además ya no se puede englobar un componente entre ella(<Route> <Home /> </Route),hay que usar la version larga(confirmar esto):

     <BrowserRouter>
        <Navbar />
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <Route path="/post/:id" element={<Post />} />
          </Routes>
    </BrowserRouter>

También ha cambiado como se agregan rutas hijas??:
<BrowserRouter>
    <Routes>
      <Route path="/" element={<App />}>
        <Route path="expenses" element={<Expenses />} />
        <Route path="invoices" element={<Invoices />} />
      </Route>
    </Routes>
  </BrowserRouter>,

Esto creará las rutas / y /expenses y /invoices (mejor hubieran usado algo diferente a /)

También cambia como usar parámetros ??:
<Routes>
  <Route path="/" element={<App />}>
    <Route path="expenses" element={<Expenses />} />
    <Route path="invoices" element={<Invoices />}>
      <Route path=":invoiceId" element={<Invoice />} />
    </Route>
    <Route
      path="*"
      element={
        <main style={{ padding: "1rem" }}>
          <p>There's nothing here!</p>
        </main>
      }
    />
  </Route>
</Routes>

Fijate como anidadn :invoiceId. Por último path='*' es para cuando no hace match,devolver el 404.

En la versión 6 ya no es <Redirect> es <Navigate>Fijate como no es lo mismo navegar que devolver el componente,esto es muy importante:

 <BrowserRouter>
        <Navbar />
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={
              user 
                ? <Navigate to="/"/>
                : <Login />} />
            <Route path="/post/:id" element={
            user
              ? <Post />
              : <Navigate to="/login" />} />
          </Routes>
    </BrowserRouter>

Si estoy en /login y no hay user simplemente devuelvo el componente(no redirigo,devuelvo el componente),pero si si lo hay entonces redirigo.NO es dificil,asin...

Fijate como puedo pasar un string a number con el +:
const post = posts.find(post => post.id === +id) <- dado que id viene de un split("/")[2] es un numero como  string,hacerle +id es un parseInt

                  PASSPORTJS

Web: http://www.passportjs.org/
Passport es un middleware de autenticación para Node.js.También encaja perfectamente con Express.Para usarle necesitará manejar la sesión,mas concretamente las cookies de la sesión,luego necesita otra dependencia siempre:

npm i express nodemon cors passport cookie-session

* passport siempre irá acompañado de cookie-session

Se usa como un middleware en la ruta,llamando a su método authenticate con una estrategia de autenticación: 

app.post('/login', passport.authenticate('local'),(req, res) => {
  res.send('xxx');
});

Passport va a requerir de varios pasos de inicialización,como permitir pasar la sesión por cors(credentials:true) o crear una cookie.

// 1º crear una cookie
app.use(cookieSession({
   name: 'session',
   keys: ['key1', 'key2'],
   maxAge: 24 * 60 * 60 * 1000 // 24 hours
}));

//2º inicializar passport con estrategia de sesión
app.use(passport.initialize());
app.use(passport.session());

// permitir pasar la sesión entre servidores con credentials a true
app.use(cors({
   origin: 'http://localhost:3000',
   methods: ['GET', 'POST', 'PUT', 'DELETE'],
   credentials: true,
}));


            CREANDO ESTRATEGIAS DE AUTENTICACIÓN CON PASSPORT

Puedo ir a su web y visitar las estrategias,por cada una que quiera agregar tengo que añadir una libreria.Empecemos con Google(recuerda que puedo usar passport-local):

npm install passport-google-oauth20            

* Con este paquete ya me podré importar su estrategia.
const GoogleStrategy = require("passport-google-oauth20").Strategy;

NOTA: La estrategia de autenticacion Google usa una cuenta de Google y tokens OAuth2.0.Hay que suministrar un ClientId y un secret como options a la estrategia(al backend).La estrategia también requiere de un callbackURL.Veamoslo en un ejemplo mejor:

* Primero hay que ir a https://console.cloud.google.com/apis/ y buscar credentials.
*NOTA: primero hay que configurar la pestaña inferior de consentimiento.
Alli doy en crear Credenciales y eligo ID de Cliente de OAuth( OAuth ClientID)
El tipo de aplicación es Web Application
En Authorized Redirect URIs,tengo que decir a que urls voy a redirigir trás el login.Van a ser dos,una el home del frontend y otra en el backend:
http://localhost:3000 y http://localhost:5000/auth/google/callback(puede ser otra cosa,pero PassportJS recomienda que sea /google/auth/callback) <- ya veré como se usa en el backend,asin...
 Una vez terminado doy en crear y me darán el ClientId y el secret(puedo descargarlos en un JSON)

Creo la estrategia:
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const passport = require('passport');

const GOOGLE_CLIENT_ID="...";
const GOOGLE_CLIENT_SECRET="..."

passport.use(new GoogleStrategy({
      clientID: GOOGLE_CLIENT_ID,
      clientSecret: GOOGLE_CLIENT_SECRET,
      callbackURL: "http://localhost:3000/auth/google/callback"
      },
      // si todo sale bien en 'profile' esta la info del usuario 
      function(accessToken, refreshToken, profile, cb) {
         console.log(profile);
         return cb(null, profile);
         }
      )
);

// dado que vamos a usar sesiones debo serializar y deserializar el usuario(esto es asi simplemente porque passport no lo hace por nosotros)

passport.serializeUser(function(user, cb) {
   cb(null, user);
});

passport.deserializeUser(function(obj, cb) {
   cb(null, obj);
}
);

IMPORTANTE:fijate que cuando he usado Firebase y su autenticacion con Google,Firebase ha echo justo esto por detrás,creando un ClientId en mi cuenta de Google,y un secret en Firebase(confirmar).Sea como sea es muy parecido usar GoogleAuth con Firebase que con Passport.
Fijate que en esa callback puedo y tendré que guardar el usuario en mi DB,etc...
Veamos que hacer con este archivo passport.js(que diría que es sólo para Google).En el index.js lo requiero:

const pasportSetup = require('./passort.js')

MINUTO 51:50 creando las rutas


