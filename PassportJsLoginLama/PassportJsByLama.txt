


 ESTRATEGIAS DE LOGEO CON PASSPORT JS- LOGIN CON GOOGLE-FACEBOOK-GITHUB-...


 Source: https://www.youtube.com/watch?v=7K9kDrtc4S8

 Con la librería passport-js puedo usar mas de 500 estrategias de autenticación.Veamos un ejemplo con Google,Facebook y Github.
 
 NOTA: ha salido la version 6 de ReactRouterDom.En ella hay algunos cambios:
 1- Ya no se usará <Switch>.En su lugar se llama <Routes> pero hace de Switch(englobará varios <Route>)
 2- En cada <Route> ya no se usa la propiedad component,se llama element.Además ya no se puede englobar un componente entre ella(<Route> <Home /> </Route),hay que usar la version larga(confirmar esto):

     <BrowserRouter>
        <Navbar />
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <Route path="/post/:id" element={<Post />} />
          </Routes>
    </BrowserRouter>

También ha cambiado como se agregan rutas hijas??:
<BrowserRouter>
    <Routes>
      <Route path="/" element={<App />}>
        <Route path="expenses" element={<Expenses />} />
        <Route path="invoices" element={<Invoices />} />
      </Route>
    </Routes>
  </BrowserRouter>,

Esto creará las rutas / y /expenses y /invoices (mejor hubieran usado algo diferente a /)

También cambia como usar parámetros ??:
<Routes>
  <Route path="/" element={<App />}>
    <Route path="expenses" element={<Expenses />} />
    <Route path="invoices" element={<Invoices />}>
      <Route path=":invoiceId" element={<Invoice />} />
    </Route>
    <Route
      path="*"
      element={
        <main style={{ padding: "1rem" }}>
          <p>There's nothing here!</p>
        </main>
      }
    />
  </Route>
</Routes>

Fijate como anidadn :invoiceId. Por último path='*' es para cuando no hace match,devolver el 404.

En la versión 6 ya no es <Redirect> es <Navigate>Fijate como no es lo mismo navegar que devolver el componente,esto es muy importante:

 <BrowserRouter>
        <Navbar />
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={
              user 
                ? <Navigate to="/"/>
                : <Login />} />
            <Route path="/post/:id" element={
            user
              ? <Post />
              : <Navigate to="/login" />} />
          </Routes>
    </BrowserRouter>

Si estoy en /login y no hay user simplemente devuelvo el componente(no redirigo,devuelvo el componente),pero si si lo hay entonces redirigo.NO es dificil,asin...

Fijate como puedo pasar un string a number con el +:
const post = posts.find(post => post.id === +id) <- dado que id viene de un split("/")[2] es un numero como  string,hacerle +id es un parseInt

                  PASSPORTJS

Web: http://www.passportjs.org/
Passport es un middleware de autenticación para Node.js.También encaja perfectamente con Express.Para usarle necesitará manejar la sesión,mas concretamente las cookies de la sesión,luego necesita otra dependencia siempre:

npm i express nodemon cors passport cookie-session

* passport siempre irá acompañado de cookie-session

Se usa como un middleware en la ruta,llamando a su método authenticate con una estrategia de autenticación: 

app.post('/login', passport.authenticate('local'),(req, res) => {
  res.send('xxx');
});

Passport va a requerir de varios pasos de inicialización,como permitir pasar la sesión por cors(credentials:true) o crear una cookie.

// 1º crear una cookie
app.use(cookieSession({
   name: 'session',
   keys: ['key1', 'key2'],
   maxAge: 24 * 60 * 60 * 1000 // 24 hours
}));

//2º inicializar passport con estrategia de sesión
app.use(passport.initialize());
app.use(passport.session());

// permitir pasar la sesión entre servidores con credentials a true
app.use(cors({
   origin: 'http://localhost:3000',
   methods: ['GET', 'POST', 'PUT', 'DELETE'],
   credentials: true,
}));


            CREANDO ESTRATEGIAS DE AUTENTICACIÓN CON PASSPORT

Puedo ir a su web y visitar las estrategias,por cada una que quiera agregar tengo que añadir una libreria.Empecemos con Google(recuerda que puedo usar passport-local):

npm install passport-google-oauth20            

* Con este paquete ya me podré importar su estrategia.
const GoogleStrategy = require("passport-google-oauth20").Strategy;

NOTA: La estrategia de autenticacion Google usa una cuenta de Google y tokens OAuth2.0.Hay que suministrar un ClientId y un secret como options a la estrategia(al backend).La estrategia también requiere de un callbackURL.Veamoslo en un ejemplo mejor:

          GOOGLE CREDENTIALS PARA UNA APP

* Primero hay que ir a https://console.cloud.google.com/apis/ y buscar credentials.
*NOTA: primero hay que configurar la pestaña inferior de consentimiento.

Alli doy en crear Credenciales y eligo ID de Cliente de OAuth( OAuth ClientID)

El tipo de aplicación es Web Application

En orígenes autorizados irá el frontend(http://localhost:3000)(la pagina de login del frontend)

En Authorized Redirect URIs,tengo que decir a que urls voy a redirigir trás el login.Van a ser dos,una el home del frontend( donde rediriga tras el exito) y otra la callback del backend(con el puerto del backend):

http://localhost:3000 y http://localhost:5000/auth/google/callback(puede ser otra cosa,pero PassportJS recomienda que sea /auth/google/callback) <- ya veré como se usa en el backend,asin...

Una vez terminado doy en crear y me darán el ClientId y el secret(puedo descargarlos en un JSON)

Creo la configuración de la estrategia en un archivo js del backend(en este caso para usar Google):
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const passport = require('passport');

const GOOGLE_CLIENT_ID="...";
const GOOGLE_CLIENT_SECRET="..."

passport.use(new GoogleStrategy({
      clientID: GOOGLE_CLIENT_ID,
      clientSecret: GOOGLE_CLIENT_SECRET,
      callbackURL: "/auth/google/callback"
      },
      // si todo sale bien en 'profile' esta la info del usuario 
      function(accessToken, refreshToken, profile, cb) {
         console.log(profile);
         return cb(null, profile);
         }
      )
);

// dado que vamos a usar sesiones debo serializar y deserializar el usuario(esto es asi simplemente porque passport no lo hace por nosotros)

passport.serializeUser(function(user, cb) {
   cb(null, user);
});

passport.deserializeUser(function(obj, cb) {
   cb(null, obj);
}
);

IMPORTANTE:fijate que cuando he usado Firebase y su autenticacion con Google,Firebase ha echo justo esto por detrás,creando un ClientId en mi cuenta de Google,y un secret en Firebase(confirmar).Sea como sea es muy parecido usar GoogleAuth con Firebase que con Passport.
Fijate que en esa callback puedo y tendré que guardar el usuario en mi DB,etc...
Veamos que hacer con este archivo passport.js(que diría que es sólo para Google).En el index.js lo requiero:

const pasportSetup = require('./passort.js')

Es hora de crear las rutas y añadir el middleware con una estrategia.
NOTA: fijate que puede ir por GET lo que recoga del login del cliente,pero irá por la URL,aun así vamos a tener que recoger el login por get:
router.get('/login') <- esta vez no va a ser por post

Hay que crear un endpoint que me devolverá en la propiedad 'scope' la data que proporcione esa estrategia:
PASO 1
router.get('/google',passport.authenticate('google',{
    scope:['profile','email']})) <- en profile tengo username,picture,etc...
PASO 2: hay que decirle a donde redireccionar tanto si tiene éxito como si falla
router.get('/google/callback', passport.authenticate('google',{ 
   successRedirect:CLIENT_URL,
   failureRedirect:'/login/failed'
}))    
PASO 3: opcional,creo esa url para el fallo
router.get("/login/failed",(req, res) => {
  res.status(404).json({success: false,message:"Login failed"})
})

IMPORTANTE: ahora en el frontend hay que usar window.open(url,modo) para abrir la ruta(por esto fuimos por GET) en el onclick del botón correspondiente:
   <button type="button" className="googleButton" onClick={googleLogin}
   const googleLogin = () => {
      window.open('http://localhost:5000/auth/google', '_self');
   }
* Si ahora voy a application,y a Cookies,veré dos nuevas cookies con la información encriptada!

Lo mismo tengo que hacer para el logout:

* En el onclick del botón que gestione el logout:
   const logout = () => {
      window.open("http://localhost:5000/auth/logout", "_self");
   }
Fijate que puedo redireccionar desde el backend si quiero,pues cuando abra ese endpoint va a leer esta lógica:

router.get('/logout',(req, res) => {
   req.logout()
   res.redirect(CLIENT_URL+'/login')
})


            ESTRATEGIA GITHUB 2

Las demás estrategias son bastante más fáciles.Voy a http://www.passportjs.org/packages/passport-github2/ para ver como funciona.
> npm install passport-github2    
Instalo el módulo        

La forma será igual,asinto(necesitaré el clienteId y el secret):

const GITHUB_CLIENT_ID="...";
const GITHUB_CLIENT_SECRET="..."

passport.use(new GitHubStrategy({
   clientID: GITHUB_CLIENT_ID,
   clientSecret: GITHUB_CLIENT_SECRET,
   callbackURL: "/auth/github/callback"
 },
 function(accessToken, refreshToken, profile, done) {
     return done(null, profile);
 }
));

Para conseguir el ClientId y el secret en vez de ir a cloud.console.google tengo que ir a mi Github,en Settings y Developers Settings vere la zona Oauth.Alli creo una nueva app:
1- La homepage URL va a ser el home en el frontend,en este caso http://locahost:3000
2- La authorization callback URL va al callback en el backend,en este caso http://localhost:5000/auth/github/callback
Fijate que el puerto es el del back y la convencion '/auth/strategyType/callback' que se mantendrá así.Tras registrar una nueva app me dará un Client Id y debo generar el secret yo.

Fijate que el efecto que me devuelve el user me vale para toda estrategia:

  useEffect(() => {
    const getUser = () => {
      fetch('http://localhost:5000/auth/login/success', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Access-Control-Allow-Origin': true,
        }
      })
        .then(response => {
          if (response.status === 200) {
            return response.json();
          } else {
            throw new Error('Auth failed: ' + response.status);
          }
        })
        .then(data => {
          setUser(data.user);
        })
        .catch(error => {
          console.error(error);
        }
        );}
    getUser();
  }, [])

Fijate que es router.get("/github", passport.authenticate("github",{scope}) <- las opciones es un objeto como segundo argumento del método authenticate. 
De igual manera creo los endpoints,fijate que ya es casi copiar y pegar,expecto crear el clientId y secret:
router.get("/github", passport.authenticate("github", {
  scope: ["profile","email"],
}));

router.get("/github/callback",
  passport.authenticate("github", {
    successRedirect: CLIENT_URL,
    failureRedirect: "/login/failed",
  })
);

ESTRATEGIA con FACEBOOK
Con facebook voy a tener un problema,ya que no me va a dejar usar el protocolo http no seguro.De nuevo necesito un ClientId y un secret.

npm install passport-facebook

Creo la estrategia en el archivo de configuración de estrategias:
const FACEBOOK_CLIENT_ID=""
const FACEBOOK_CLIENT_SECRET=""

passport.use(new FacebookStrategy({
   clientID: FACEBOOK_CLIENT_ID,
   clientSecret: FACEBOOK_CLIENT_SECRET,
   callbackURL: "/auth/facebook/callback"
 },
 function(accessToken, refreshToken, profile, done) {
     return done(null, profile);
 }
));

Creo las rutas:
router.get(
  "/facebook",
  passport.authenticate("facebook", {
    scope: ["profile", "email"],
  })
);

router.get(
  "/facebook/callback",
  passport.authenticate("facebook", {
    successRedirect: CLIENT_URL,
    failureRedirect: "/login/failed",
  })
);

Apunto en el onclick,etc...
   const facebookLogin = () => {
      window.open('http://localhost:5000/auth/facebook', '_self');
   }

Puedo observar que algo que parecia complejo realmente es tremendamente simple con passport.
Implementar github y facebook en la red social.

          IMPLEMENTAR FACEBOOK OAUTH

Source: https://www.youtube.com/watch?v=KlE9RAOl9KA

Se necesita: 
1- una cuenta de Facebook Developer
2- una registered Facebook App con los Basic Settings configured

Al crear una app eligo(for everything else)
Cuando se cree eligo agregar Facebook Login,dando en el botón de "Setup"
Eligo el tipo(Web App) y me pedirá el dominio del front(http://localhost:3000).
En cuanto haya puesto el dominio para la app ya puedo ir a configuración/información-básica(Son los basic Settings que hay que configurar)
Ya desde el primer momento puedo ver la App Id(Identificador de la aplicación) y al lado el Secret en los Basic Settings.
En Products/FacebookLogin/Settings tengo que proveer una URi válida de redireccionamiento del OAuth(http://locahost:5000/auth/facebook/callback)

NOTA: fijate que puedo agregar propiedades al UserSchema para que me gestione passport la creación del usuario:

* Hay que agregar facebookId,googleId,githubId,etc... si quiero al schema 
 function(accessToken, refreshToken, profile, cb) {
    User.findOrCreate({ facebookId: profile.id }, function (err, user) {
      return cb(err, user);
    });


