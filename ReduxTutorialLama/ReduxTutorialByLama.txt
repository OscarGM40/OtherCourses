					TUTORIAL REDUX BY LAMA

Source: https://www.youtube.com/watch?v=DYtYyFOfpBY

Imagina que tengo un proyecto con 7 niveles de descendencia y que necesito pasar una prop al 6º o 7º hijo.Es una terrible idea pasarla a traves de los padres,ya que recuerda que pasar una prop hace re-renderizarse el componente,
No me acordaba de esto,y realmente pasar una prop es algo tan común,... debo recordar que el componente que reciba una prop si la prop cambia se vuelve a renderizar,incluso si él no la consume(sucede lo mismo en Angular??).
Estaría renderizando media aplicación sólo por pasar esa prop hasta el 7º hijo.Además del consumo de recursos y la caida del performance por ello.

La solución siempre es usar un Store central,el cual suministra directamente la información a cualquier componente,sin pasar por sus padres(y por ello no se renderizan)
Hay varias herramientas para el manejo del estado de la data.
Fijate que cada componente cogerá su prop y no dispara renderizados adicionales.Es por esto que React debe trabajar con un store si o si.

Aunque pueda parecer que API Context es igual que Redux no lo son,ya quecon una state management tool puedes elegir cualquier item en el store y re-renderizar un componente en base sólo a ese elemento/propiedad del store.
La API Context depende de todo el store,no permite que se este haciendo watch a un único elemento dentro del store(como state.user.name).Aun asi es una gran solución.

La web oficial con la documentación está aqui: https://es.redux.js.org/
En ella se especifica que Redux Toolkit debería ser la solución a seguir(claro que es su web...).Primero que nada hay que instalar estos dos paquetes con npm o yarn:

>npm install @reduxjs/toolkit
>npm install react-redux <- la necesitaré para usa el componente <Provider></Provider>

                    PASOS A SEGUIR

1º: PASO UNO CREAR EL XXXSLICE(CONFIGURAR EL ALMACEN):

Lo primero es crear un estado inicial,un nombre para el almacén y definir el nombre de las acciones y la lógica de ellas,todo esto se hace de una vez con la funcion createSlice.
Es realment cómodo.

import { createSlice } from "@reduxjs/toolkit";:
import userReducer from "./userSlice";

Con createSlice definiré la configuración de un almacén, al que le daré un name, si es un almacen para users le llamo userSlice, si es para auth le puedo llamar authSlice,... lo típico:

* El file lo llamamoa userSlice.js por motivos obvios

export const userSlice = createSlice({
  name:"user", <- es el nombre de este almacén.Podré acceder a este almacén con store.user. cuando use el hook useSelector.Fijate que normalmente haré mas, como por ejemplo sockets o auth y luego accederé con store.socket o store.auth.Basicamente es el primer nivel de abstracion dentro del almacén para crear subalmacenes de datos.

  initialState:{
    name:"john",
    email:"john@gmail.com"
    pending:false,
    error:false
  },
  // también definiré la lógica y el nombre de las acciones que podré realizar en este metodo,dentro de la propiedad 'reducers',que  es un objeto cuyas propiedades son funciones.Siempre reciben el 'state' como argumento y la action con el payload.Son como un bloque del useReducer de la APIContext.
  reducers:{
    update: (state,action) => {
      state.name = action.payload.name; <- state.name lo saco del initialState
      state.email = action.payload.email; <- estoy en una funcion por eso uso punto y coma
  }
})

De esta función hay que exportar tanto el reducer (ojo,con la propiedad reducer,en singular) para proveerlo a toda la App con el configureStore, que lo importará, como cada una de sus acciones que quiera usar para poder dispararlas donde necesite,importando éstas en cualquier archivo que las quiera disparar/usar:

export const { update } = userSlice.actions<- fijate que es 'update' porque la llamé asi
export default userSlice.reducer; <- exporto todo el reducer

2º: PASO DOS - CREAR EL STORE Ó ALMACÉN:

Me creo otro archivo(también se puede juntar el slice y el store).Lo primero es importar la funcion configureStore({}).Hay que definirle su propiedad reducer.
El name es que le dí en la propiedad name del xxxSlice.El reducer el xxxSlice.reducer que importé.

import { configureStore } from "@reduxjs/toolkit";

export default configureStore({
  reducer: {
    user: userReducer, (name,reducer)
  },
});

* Ya he creado y configurado el almacén,falta envolver la App en un punto alto.
Pero para poder hacer esto necesitaré otro módulo, el módulo 'react-redux' para poder usar el componente <Provider>.

import myStore from "./redux/store"
import { Provider } from "react-redux";

ReactDOM.render(
  <Provider store={myStore}>
      <App />
  </Provider>
IMPORTANTE: la propiedad mystore es simplemente la exportación por default, donde está configureStore declarado.Una vez wrappeada toda la App ya puedo acceder a este contexto/slice/store/almacén con el hook UseSelector((store) => { return store.substore.field }) que devuelve la parte del almacén que le pida.
Fijate que este hook viene de react-redux,no es parte del core básico de React.

				USESELECTOR HOOK - USANDO EL ALMACEN

Para poder usar alguna propiedad o funcion de este store debo usar el hook UseSelector().

const name = useSelector( state => state.user.name)

* Ya puedo alcanzar el valor del name o del email del almacén.Dado que al crear el store con configureStore() sólo he creado uno con el nombre 'user' tiene que ser state.user

export default configureStore({
  reducer: {
    user: userReducer, <- éste user,se refiere al almacén(aunque va a coincidir con el del slice,claro)
},
* Donde quiera puedo inferir el name y email.
export default function Recommendation({ type }) {
  const name = useSelector( (state) => state.user.name)
  const title =
    type === "user"
      ? `Recommended for ${name}`
Veamos ahora como disparar una accion,para ello necesitaré el hook useDispatch:

      USEDISPATCH HOOK - DISPARANDO ACCIONES

Para disparar cualquier accion primero tengo que exportarla desde xxxlice.actions.
Luego ya puedo usarla.Para ello usaré el hook useDispatch(action(payload)).
El hook viene de react-redux.

Veamos como actualizar el user con la action update:

import { update } from "../../redux/userSlice";
import { useSelector,useDispatch } from "react-redux";

export default function Update() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  // dado que estoy en el formulario quiero todo ,el user y el name
  const user = useSelector((state) => state.user);
  const dispatch = useDispatch(); <- recuerda que hay que asignarlo

  const handleClick = (e) => {
    e.preventDefault();
    dispatch(update({ name, email }));
  }; 

Recuerda que un componente sólo se va a re-renderizar si le cambia una prop.Por ejemplo,si pongo un console.log en la navbar veré que solo se renderiza de nuevo si cambio el name en el formulario,pero no si sólo cambio el email.Redux es muy eficiente en esto.

const Navbar = () => {
  const name = useSelector((state) => state.user.name);
  console.log("navbar re-rendered!"); <- solo cambiará si cambia alguna prop del componente!

          IMPLEMENTANDO ASINCRONIA

IMPORTANTE:fijate que siempre voy a trabajar con Promesas.En todo state debería haber las propiedades Pending y error,para mostrar spinners o loaders y el error.Estas propiedades son innegociables en cualquier aplicación.

Para implementar estas propiedades puedo usar mis CustomReducers o usar la solución que ya provee redux con el método createThunk | createAsyncThunk.Veamos primero como hacerlo nosotros:

const userSlice = createSlice({
  name:"user",
  initialState: {
    user:{
      name:"anna",
      email:"anna@gmail.com",
    },
    pending:false,
    error:false
  },
  reducers: {
    updateStart: (state) => {
      ...state,
      state.pending:true,
    },
    updateSuccess: (state,action) => {
      state.pending:false,
      state.user= action.payload
    }
  }
})

IMPORTANTE: en el momento en que use este tipo de customReducers se dispararán las tres en un mismo bloque/función.En este caso será la funcion updateUser y se define en un archivo APICalls,o similar:
export const { updateStart, updateSuccess, updateError } = userSlice.actions;
export default userSlice.reducer;

* En ese archivo APICalls disparo la accion de updateUser que llamará a estos tres reducers.


* Y esta call la llamo en la template,en el update.Fijate que la tengo que pasar el dispatch como argumento:

  const dispatch = useDispatch();
  const handleClick = (e) => {
    e.preventDefault();
    updateUser({name,email},dispatch) <- 
  };

Dado que tenemos el estado Pending ahora puedo desactivar botones,etcFijate que debo implementar la regla css cursor:not-allowed para una mejor experiencia de usuario:

.updateButton:disabled{ <- trata de implementar esto desde ahora
  cursor: not-allowed;
  background-color: rgb(136, 168, 168);
}
  <button
    disabled={pending}
    className="updateButton"
    onClick={handleClick}
  >
Date cuenta que son demasiadas cosas,y está claro que es un poco agobiante darte cuenta que haces muchas cosas mal por desconocimento,pero tienes que absorber e implementar cualquier cosa que sepas que es una mejora.Redux es una mejora,un estado Pending es una mejora,mejorar en Css y Html y Js puros es muy importante también.

            SOLUCION DOS CREATE_ASYNC_THUNK

Redux tiene una manera de proporcionarme un estado de retorn( pending | fulfilled | rejected) de forma que no tenga que escribir tres estados yo por cada accion(updateStart | updateSuccess | updateError).Interesante

El único downside que puede tener es que no tendré flexibilidad

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import axios from 'axios';

* El primer argumento es cualquier nombre para la accion,eso si ,como string.
* El segundo es una funcion asincrona  
export const updateUserThunk = createAsyncThunk(
  "users/update", //nombre para esta accion(users/update)
  async (user) => { user será el payload{name:'',email:''}

  const res = await axios.post("http://localhost:8000/api/users/1/update",user) <- fijate como update necesitará un payload

  return res.data;

  }

* IMPORTANTE: fijate que no he usado ningun try/catch.Esta funcion lo hará por nosotros,automáticamente.Ejemplo completo:

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import axios from 'axios';

//ya va a manejar redux los errores pasandolos a method.pending method.fulfilled ó method.rejected
export const updateUserThunk = createAsyncThunk("users/update", async (user) => {
  const res = await axios.post("http://localhost:8800/api/users/1/update",user);
  return res.data;
})

export const userSlice = createSlice({
  name: 'user',
  initialState:{
    userInfo: {
      name:'anna',
      email: 'anna@gmail.com'
    },
    pending:null,
    error:false
  },
  reducers:{},
  extraReducers:{
    [updateUserThunk.pending]:(state) => {
      state.pending = true;
      state.error = false;
    },
    [updateUserThunk.fulfilled]:(state,action) => {
      state.pending = false;
      state.error = false;
      state.userInfo = action.payload;
    },
    [updateUserThunk.rejected]:(state) => {
      state.pending = false;
      state.error = true;

    }
  },
})

export default userSlice.reducer;

* Fijate que estoy exportando esa funcion que usa createAsyncThunk,ahora tengo que importarla donde quiera usarla:

  const handleClick = (e) => {
    e.preventDefault();
    // dispatch(update({ name, email }));
    // updateUser({name,email},dispatch)
    dispatch(updateUserThunk({name,email}))
  };
  
Ojo que se dispara un poco diferente.Realmente es muy parecido a Context,aunque cambian un par de cosas.Nada que un par de proyectos con Redux no resuelva.Keep on