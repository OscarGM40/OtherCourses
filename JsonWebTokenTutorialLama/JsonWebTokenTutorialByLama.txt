					JWT AUTHENTICATION TUTORIAL

Source: https://www.youtube.com/watch?v=Yh5Lil03tpI&t=1s

Toda aplicación debe llevar authorization y authentication incorporada.Para solucionar esto se usa un token que viaja entre peticiones en la aplicacion.

El problema no es guardar datos en el localStorage,el problema es una API que no use  JWT auth.La forma de entregarlo siempre es igual:
1- El usuario se logea exitosamente -> hacia el server
2- El server envia un token encriptado   <- hacia el cliente
3- El usuario manda las peticiones con el jwt -> hacia el server
4- El server vigila por ese token en cada peticion <- hacia el cliente

* Puedo ver que esto me obliga a crear un token,a enviarlo desde el cliente y a poder compararlo.

				DEPENDENCIAS

Hagamos un pequeño proyecto para entenderlo.Creo un backend node y un cliente.Instalo express y jsonwebtoken:
>>npm init -y
>>npm i express jsonwebtoken

   CREAR UN TOKEN

Para crear un token se usa el método jwt.sign({payload},secret,{options}).Siempre se envia en el endpoint del login,tras un login exitoso.

   if(user){
      //Generate an access token
      const accessToken = jwt.sign({
         id:user.id,
         isAdmin:user.isAdmin,
      },"mysecretkey",{expiresIn: "20s"})
      
      res.json({
         username:user.username,
         isAdmin:user.isAdmin,
         accessToken
      })

			VERIFICAR EL TOKEN RECIBIDO DEL FRENTE EN EL SERVIDOR

* Logicamente lo devuelvo al frente junto con lo que yo quiera.Necesitaré el método jwt.verify(token,secret,cb(error,user)) para verificar el token que me envie el cliente.Fijate que la callback es opcional y que el método es un middleware.Comprueba que venga en el header de la petición.

const verifyToken = (req,res,next) => {
   const authHeader = req.headers.authorization;
   if(authHeader){
      const token = authHeader.split(" ")[1];
      jwt.verify(token,"mysecretkey",(error,user) => {
         if(error){
            return res.status(403).json("Token is not valid")
         } 
         req.user = user;
         next();
      })
   }else {
      res.status(401).json("Not authenticated")
   }
}
** Fijate como he creado una propiedad nueva (req.user) que tiene el payload desencriptado.Asi que en cuanto use en una ruta el middleware puedo comprobar con req.user.isAdmin por ejemplo o req.user.username.Además recuerda que los objetos globales req o res son śolo de Node,del server.

				PROTEGER RUTAS CON EL TOKEN

A partir de este momento puedo usar este middleware en cada ruta.Antes de hacer nada el middleware comprobará si hay un token válido en la cabecera de cada peticion que tenga este middleware.Si no lo hay no llegará a los objetos req y res ya que entrará por el error.
Si todo es correcto tal como tengo la lógica simplemente guardará en req.user el user.
NOTA:el user es el payload,quizás es mejor que lo llame payload

app.delete("/api/users/:userId",verifyToken,(req,res) => {
   if(req.user.id === req.params.userId || req.user.isAdmin){
      res.status(200).json("User has been deleted")
   } else {
      res.status(403).json("You are not allowed to delete this user")
   }
})
* Desde ahora puedo comprobar cualquier propiedad que guardara en el payload.Lógicamente propiedades como isAdmin o el id debería mandarlas en el payload,ya que la lógica irá por ese lado.
* Fijate que si necesito que el id sea el de el user tengo que comprobar con req.user.id === req.params.id (si el id del token es el mismo que la peticion.
					REFRESH TOKEN

Un token no puede durar mucho,ya que podría banearse al usuario y éste aún tendrá acceso todo ese tiempo restante.Normalmente se crean dos tokens,un token de acceso y despues un refresh token:

const generateAccessToken = (user) => {
   return jwt.sign({ id:user.id, isAdmin:user.isAdmin },
      "secretone",
      { expiresIn:"15m" })
}

const generateRefreshToken = (user) => {
   return jwt.sign({ id:user.id, isAdmin:user.isAdmin },
      "secrettwo",
      { expiresIn:"150m" })
}

const token = req.body.token <- parece que voy a mandar el token por el body en la propiedad token para montar el refresh token.

let refreshTokens = []


app.post('/api/refresh', (req,res) => {
   //take the refresh token from the user
   const refreshToken = req.body.token 
   
   //send error if there is no token or it's invalid
   if(!refreshToken) return res.status(401).json("You are not authenticated")
   if(!refreshTokens.includes(refreshToken)){
      return res.status(403).json("Refresh token is not valid")
   }
   //si en el body viene un token que ya tengo almacenado

   jwt.verify(refreshToken,"refreshkey", (err,user) => {
      err && console.log(err);

      // si pasa la verificacion(luego es el mismo token)
      // lo invalido eliminandolo del array de tokens filtrando por todos los que no sean ese token
      refreshTokens = refreshTokens.filter(token => token != refreshToken);
      
      // creo ambos tokens de nuevo
      const newAccessToken = generateAccessToken(user)
      const newRefreshToken = generateAccessToken(user)

      refreshTokens.push(newRefreshToken);

      res.status(200).json({
         accessToken: newAccessToken,
         refreshToken: newRefreshToken
      })
   })
})
Puedo ver que el refresh token es el que hace todo el trabajo,aunque sea el access token el que se use para validar.
* Usar jwt obliga al cliente a mandar en req.headers la propiedad authorization con el valor de "Bearer token".

En cuanto use jwt ya no podré realizar ninguna acción en cualquier ruta que esté protegida por token.
Fijate que usar refreshToken me obliga a crear otro endpoint y más lógica.

Al salir lama creó esta lógica:

app.post('/api/logout',verifyToken, (req,res) => {
   const refreshToken = req.body.token;

   refreshTokens.filter(token => token !==refreshToken)
   res.status(200).json("You logged out succesfully")
})

* Cuanto tiempo durá el refresh token?


			PARTE DEL CLIENTE

El cliente siempre recibirá el token desde el backend en cuanto se logea exitosamente.Sólo tiene que mandarlo en cada petición(menos en el login,claro):

  const handleDelete = async (e) => {
    try {
      const res = await axios.delete("http://localhost:5000/api/users/1",
      {
        headers: 
        {
          'Content-Type': 'application/json',
          'authorization': `Bearer ${user.accessToken}`
        }
      });
El token que recibo del backend lo guardo en el localStorage, o con Redux,etc...

Fijate que ya desde el primer momento del login exitoso de un usuario puedo saber si ese user es un Admin o no,mandandole a un dashboard si si lo es o a la app normal si es un user cualquiera.

      { user && <h1>{user.isAdmin ? "Bienvenido Admin" : "Bienvenido User"}</h1> }

También debo guardar el token en el localStorage,pero ojo con los tiempos.
Puedo apreciar que devolver el token y trabajar en base a él es muy sencillo,más de lo que pensaba. 
En el frente apenas hay que mandar los headers en cada peticion.Ir mirando como cambiar la app desde el proximo jueves o viernes.

										REFRESH TOKEN

* Para refrescar el token en el cliente voy a necesitar interceptores.Con los interceptores de axios puedo interceptar cualquier peticion o respuesta y realizar algo antes de que siga su curso.
Basicamente es un como un middleware

  const refreshToken = asyn (req,res) => {
    try {
      //para refrescar el token mando el refreh toke por el body
      // con la propiedad token en este caso
      //recuerda que esta peticion me devuelve dos tokens nuevos
        const res = await axios.get(`http://localhost:5000/api/refresh`,{
            token:user.refreshToken
        })      
        setUser({
          ...user,
          accessToken:res.data.accessToken,
          refreshToken:res.data.refreshToken
        })
    } catch (error) {
      console.log(error.response.data)
    }
  }

* Bien,esta funcion refresca el token,pero esto debe hacerse en un segundo plano,no le podemos poner al usuario un botón para que refresque su token.

* Voy a necesitar la libreria jwt-decode para decodificar el token y sacar su tiempo de expiración!:

>npm i jwt-decode
import jwt_decode from 'jwt-decode';

//puedo interceptar cualquier request o response 
axios.interceptors.request.use( async(config) => ( 
 	//dentro de config esta toda la request
    let currentDate= new Date();
	const decodedToken = jwt_decode(user.accessToken)
)

{id: "2", isAdmin: false, iat: 1627837917, exp: 1627838817}
exp: 1627838817
iat: 1627837917
id: "2"
isAdmin: false

* En exp tendré cuando expira y en iat cuando se creó!.

  //no tengo porque trabajar con la instancia común de axios
  //puedo crearme cuantas quiera con axios.create()
  const axiosJWT = axios.create()
  
  
    axiosJWT.interceptors.request.use( async (config) => {
      let currentDate = new Date();
      let decodedToken = jwt_decode(user.accessToken)
      console.log(decodedToken)
      //paso a segundos la exp date.Cuando el user haga una peticion y el token haya expirado(su tiempo es menor que el actual) se refrescaran los tokens
      if(decodedToken.exp * 1000 < currentDate.getTime()) {
        const data = await refreshToken()
        // refreshToken() me devuelve ambos tokens!
        // intercepto los headers y actualizo el accesstoken
        config.headers["authorization"] ="Bearer "+data.data.accessToken;
      }
      //ya puedo devolver la config
      return config;
      //ojo que puede haber errores y debo cancelar mi promesa
    },(error) => Promise.reject(error))  
Tengo que crearme una nueva instancia de axios.Ojo que el handleDelete también la llevaba.Investigar más sobre esto en un futuro.
