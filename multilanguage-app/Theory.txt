          MULTILANGUAGE IMPL IN REACT

Source: https://www.youtube.com/watch?v=w04LXKlusCQ

React-i18next es un framework de internacionalización para React/React-native basado en i18next.

Documentacion oficial: https://react.i18next.com/

            INSTALAR Y CONFIGURAR i18NEXT

Para usarlo hay que instalar el propio i18next y la implementation para react 'react-i18next':
>npm install react-i18next i18next --save

Ahora hay que configurarlo:

import i18n from "i18next";
import { useTranslation, initReactI18next } from "react-i18next";

/* de react me traigo i18n */
i18n
// le paso su adapter al framework
.use(initReactI18next) 
  .init({
    // traducciones en duro.NO usar asi,hardcodeadas
    resources: {
      en: {
        translation: {
          "Welcome to React": "Welcome to React and react-i18next",
        },
      },
      es: {
        translation: {
          "Welcome to React": "Bienvenido a React y react-i18next",
        },
      },
      fr:{
        translation: {
          "Welcome to React": "Bienvenue à React et react-i18next",
        },
      },
      }
    },
    lng: "en", // de nuevo no se hardcodea el lng
   fallbackLng: "en", // fallback para cuando no se detecte el lng
  });
Realmente esto es muy básico,hay varias librerias que conformarán toda la suite para implementar traducciones.

function App() {
  const { t } = useTranslation();
  return <h2>{t("Welcome to React")}</h2>;
}

Fijate como es usar el hook useTranslation()bajo el nombre 't' para obtener el texto traducido.Y meter los textos en el archivo de traducciones.

NOTA: la App va a mostrar el idioma según el lng que en el ejemplo está hardcodeado(lng: "en")
Puedo hacer que lo coga de aqui(<html lang="es>)
lng: document.querySelector('html').lang

* Sin embargo esto no es muy útil ya que el servidor me devolverá un archivo con el mismo lenguaje realmente.Hay que hacer esto dinámico.

          AUTO-DETECT BROWSER LANGUAGE PLUGIN

Afortunadamente puedo usar un detector de lenguaje,una libreria que mirará por el language del browser:

>npm install i18next-browser-languagedetector --save

Para hacer el wiring simplemente es una opcion mas en la config inicial:
import i18next from 'i18next'; <- ya lo tendré
import LanguageDetector from 'i18next-browser-languagedetector';

i18next.use(LanguageDetector).init(...);

El plugin tiene varios lugares de donde detectar el lenguaje,como el browser,el localStorage,una cookie,la sessionStorage...
El orden es muy importante.Este plugin usará la propiedad detection y el middleware anterior:

detection:{
  order:[,'cookie','htmlTag','localStorage','path','subdomain'],
  caches:['cookie','localStorage'],
}
* Más adelante entenderé el order y porqué estas cinco.La opción de caches es básica,ya que debo almacenar la preferencia.
La cookie como primera va perfecta,al parecer.

      CARGAR TRADUCCIONES DE UN BACKEND(i18next-http-backend)

NOTA: es obvio que las traducciones deben ir en archivos separados.Ponerlo todo en un mismo lado además haría que tengas que descargarte todas las traducciones cuando sólo necesitas una.

Para esto voy a necesitar otro paquete llamado i18next-http-backend. ES un middleware que me va a permitir cargar las traducciones de diferentes lugares(carpetas,servidores,...).Lo instalo:

>npm i i18next-http-backend --save

Fijate que este paquete usa React Suspense para que pueda mostrar un spinner o hacer algo mientras carga
Error: App suspended while rendering, but no fallback UI was specified.

Para decir a la libreria que no use suspense,y de donde cargar las traducciones(puede ser otra api,etc):

backend: {
  loadPath: "/assets/locales/{{lng}}/translation.json"
 },
react: {
  useSuspense: false  // no uso suspense
}

NOTA:siempre va a cargar el paquete del fallback más el de la cookie:
fallbackLng: "en", <- el de en siempre va a cargarlo

TAmbién debo especificar los lenguajes que soporta mi app
supportedLngs: ['en', 'es', 'fr','ar'],

          PASAR VARIABLES DINÁMICAS A LAS TRADUCCIONES

En las traducciones puedo dejar huecos para inferir valores de cualquier lugar:
  "days_since_release": "ça fait {{number_of_days}} jours depuis la sortie de cette vidéo"
Simplemente uso dobles llaves y un nombre,despues debo proporcionar el valor:

  const releaseDate = new Date("2021-12-06");
  const number_of_days = Math.floor((new Date() - releaseDate)/(1000*60*60*24));

  return (
    <div className="container-fluid">
      <div className="d-flex flex-column align-items-start">
        <h1 className="font-weight-normal mb-3">
          {t("welcome_message")}
        </h1>
        <p className="lead">
          {t("days_since_release",{number_of_days})} 
        </p>

Fijate que se llaman igual, 'number_of_days' y que debo proporcionar un valor.Esto es necesario para inferir un nombre desde redux,etc..
Puedo dar un valor con   {t("days_since_release",{number_of_days:25})}.Esto sobreescribirá a todo y será 25.

        CAMBIAR IDIOMA DINÁMICAMENTE

Puedo crear un dropdown o lo que quiera para cambiar el idioma.NOTA: React se queja cuando pongo un <a> que no va a ningun lado.Debo usar un button mejor.

* NO USAR UNA <A> con href="#",usar un <button>  
<li key={language.country_code}>
  <a class="dropdown-item" href="#">Action</a>
</li>

Para ver las banderas como iconos usaremos la librería flag-icon-css:
>npm install flag-icon-css

Para usarla simplemente uso las clases flag-icon y flag-icon-Codigo del pais:
<span class="flag-icon flag-icon-es"></span>
Sin embargo haremos este CSS dinámico:
<span className={`flag-icon flag-icon-${language.country_code.toLowerCase()}`}></span>

También tendré que traer los estilos:
import 'flag-icon-css/css/flag-icons.css';

 <span className={`flag-icon flag-icon-${language.country_code} mx-2`}>

También cambiamos ese icono tan feo.Mejor traerme el svg y meterlo en un functional component:

const GlobeIcon = ({ width=16, height=16}) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width={width} height={height} fill="currentColor" class="bi bi-globe" viewBox="0 0 16 16">

Para cambiar el lenguaje hay que usar la funcion changeLanguage de i18next:
import i18next from 'i18next';

<button className="dropdown-item"
  onClick={() => i18next.changeLanguage(language.code)}   >

          SUSPENSE EN REACT

Puedo usar Suspense para mostrar algo mientras carga la aplicacion:
import react,{Suspense} from 'react';

const loadingMarkup = <div className="text-center">
  <div className="spinner-border" role="status">
    <span className="sr-only">Loading...</span>
  </div>

<Suspense fallback>
  <App />
</Suspense>

          CHANGE DIRECTION OF THE TEXT

Puedo usar un atributo 'dir' en la tag body que especifica la dirección del texto:
<body dir="ltr"> <- por defecto es asi también

Despues la pongo como prop en los lenguajes necesarios:
  { code: "ar", name: "العربية", country_code: 'sa',dir:"rtl" },
Ahora tengo que acceder a la cookie asi que necesito la libreria js-cookie(es un paquete que me permite manipular cookies en el cliente,fijate que cookie-session es para el server):
>npm install js-cookie

import cookies from "js-cookie";

const currentLanguageCode = cookies.get('i18next') || 'en';
const currentLanguage = languages.find(language => language.code === currentLanguageCode);

document.body.dir = currentLanguage.dir || 'ltr';

  

Por último seria buena idea cambiar como se ve el lenguaje seleccionado de alguna forma:
 <button 
    className="dropdown-item"
    onClick={() => i18next.changeLanguage(language.code)}   
    disabled={language.code === currentLanguageCode}
    >
    <span 
    className={`flag-icon flag-icon-${language.country_code} mx-2`}
    style={{ opacity: language.code === currentLanguageCode ? 0.5 : 1 }}
    >