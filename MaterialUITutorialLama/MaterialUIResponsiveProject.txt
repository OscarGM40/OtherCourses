								 PROYECTO CON MATERIAL UI RESPONSIVE

SOURCE: https://www.youtube.com/watch?v=lKZiXQWnlUw&t=64s

NOTA: al instalar npm i @material-ui/core ellos se encargan de inyectar el CSS
>npm i @material-ui/core @material-ui/styles @material-ui/icons

					CUSTOM CSS INLINE & WITH MAKESTYLES
 
Ojo,que hay que instalar también los estilos (npm i @material-ui/styles)
Para crear elementos con el color que yo quiera es muy fácil.Sólo hay que usar la propiedad style:
<Button variant="contained"
size="large" startIcon={ <Person /> }
style={{ backgroundColor:"purple",color:"white"}} 

Sin embargo esto no es muy eficiente si tengo que pasar muchas reglas CSS.En ese caso es mejor usar el hook makeStyles:

import { makeStyles } from '@material-ui/core/styles';

const useStyles = makeStyles({})


const useStyles = makeStyles({
  button: {
    backgroundColor: "black",
    color: "white",
  },
});

const App = () => {
  const classes = useStyles();
  return (
    <Button variant="outlined" 
    className={classes.button}
    style={{paddingTop:"15px"}}
    color="secondary">

      Material UI
    </Button>
  );
												THEME AND PALETTE

MAterial UI provee una paleta de colores también.Por ejemplo puedo usar palette.primary.light o palette.info.light aunque no tiene muchos.Para usarlos hay que usar el theme en el hook.Es obvio,ya que tengo que usar el theme interno.
const useStyles = makeStyles((theme) => 

También me puedo crear un theme ,en vez de usar el suyo.Una vez creado hay que envolver los componentes en ese tema:

import { ThemeProvider } from '@material-ui/core/styles';

const theme = createTheme({
palette: {
  primary:{
    main: purple[500]
...

Depues solo hay que envolver los componentes en ese tema:

return ( 
<ThemeProvider theme={temapropio}>
<App />

					RESPONSIBIDAD Y BREAKPOINTS

Material UI permite usar sus breakpoints para crear diseños responsivos
xs:de 0 a 600px
sm: de 600 a 960px
md:de 960px a 1280px
lg: de 1280px a 1920px
xl: más de 1920px
Cada rango empieza desde el valor del breakpoint incluyendolo hasta el siguiente valor excluyendolo(de 600 a 959,de 960 a 1279,...)

Para usarlos hay que usar el theme ya que son propiedades del tema.
const useStyles = (theme) => ({

   clase: {
    padding: theme.spacing(1),
    [theme.breakpoints.down('sm')]:{
    backgroundColor: theme.palette.secondary.main 
 },
    [theme.breakpoints.up('md')]:{
    backgroundColor: theme.palette.primary.main
 
Ojo que son incluyentes(up('md')== md y +:

const useStyles = makeStyles( (theme) => ({
  logoLg:{
    [theme.breakpoints.between('xs','sm')]:{
      display:'none',
    }
  },
  logoSm:{
    [theme.breakpoints.up('md')]:{ <- de md hacia arriba,incluye md
      display:'none',
    }
  }
}));
 
Fijate en propiedades como theme.spacing o theme.palette ,theme.transitions o theme.shape.Y en métodos como alpha para sustituir a rgba()
Para usar pseudoclases se usan como en SASS pero en un string: '&:hover' '&:active' etc...

  search:{
    display: 'flex',
    alignItems: 'center', 
    backgroundColor: alpha(theme.palette.common.white,0.15),
    '&:hover': {
      backgroundColor: alpha(theme.palette.common.white,0.25)
    },
     borderRadius: theme.shape.borderRadius,
     width:'50%',
  },
  searchIcon:{
    padding: theme.spacing(0, 1),
    // pointerEvents: 'none',
  },
  searchInput:{
    color:'white',
    padding: theme.spacing(0.1, 0, 0.1, 0),
    marginLeft:theme.spacing(1)
  }
Y fijate como era mucho más fácil de lo que pensabas.

				BADGES Y AVATARES

Los <Badge> me permiten usar iconos junto con notificaciones.Son muy fáciles de usar.Por otro lado un <Avatar> me permite crear el tipico avatar con la imagen de usuario en pequeño:

Algo que no usamos fue pasarle estados locales al hook useStyles():

* Declaro estados y se los paso al estilo.Con esto tendré visión en los estilos de ese boleano
const Navbar = () => {
  const [ open, setOpen ] = useState(false) 
  const classes = useStyles({open});  <- le paso open 

Algún componente cambiará ese estado(un botón,o terminar una petición,etc... lo que yo quiera que cambie ese estado)En este caso es un simple boton

    <Search className={classes.searchHidden} 
         onClick={ () => setOpen(true) }/>

Ahora ya puedo renderizar estilos dependiendo de ese useState:

 icons: {
    display: 'flex',
    alignItems: 'center',
    [theme.breakpoints.down('sm')]:{
      display: (props) => (props.open) ? "none" : "flex"
    }
  },
Esto es muy potente.

				 CONTAINER ELEMENT  AND GRID-SYTEM

El <Grid> de Material trabaja con flex.Hay dos tipos de layouts o propiedades para él: containers y items.
Nota: contain es como la row y item es cada item (como una columna).Aunque si digo que hay 3 items ya cogeran 4 columnas cada uno,
Aparte estos items se le puede pasar diferentes breakpoints(es como si dijera col-sm-12 col-md-6 col-lg-4 en bootstrap)

Los items son seteados en porcentajes,con lo que siempre mantienen su aspecto respecto al padre.
Lo más importante es entender que no usa el sistema Grid aunque se llame Grid,sino que es puro Flex.
Un ejemplo básico sería:
<Grid container> <- creo la fila
<Grid item xs=12 sm=6 md=4> columna responsiva
<Grid item xs=12 sm=3 md=3> ...
* Es como las rows y cols de bootstrap
Usaremos este(buscar su contrapartida en material-design con bootstrap)
  <Grid container>
     <Grid item sm={2}>
       <Leftbar /> 
     </Grid>
     <Grid item sm={7}>
      <Feed />
     </Grid>
     <Grid item sm={3}>
       <Rightbar />
     </Grid>
   </Grid> 
* Fijate que en md se pondrá en 4+4+4¿?

El <Container />(no confundir con el <Grid container> es un elemento básico.Centra el texto horizontalmente por defecto.Hay de tipo fluid y fixed.No parece que haga nada más.Al final usaré un List dentro de él

NOTA: las Navbar van en position="static" o "sitcky" o "fixed".Tendré que tratar el tema de la altura según cual eliga.

					TOOLTIP MODALS AND RENAMING ANY IMPORTED ELEMENT

Los tooltip son las leyendas que salen sobre los elementos.Fijate como en este caso el componente se llama Add,igual que el icono y lo renombro:
Un modal se puede manejar su estado con su propiedad open:

  const [ open, setOpen ] = useState(false)
  const classes = useStyles();
  return (
   <>
    <Tooltip 
      title="Add"
      aria-label="add"
      onClick={ () => setOpen(true) }>
      <Fab color="secondary" className={classes.absolute}>
        <AddIcon />
      </Fab>
    </Tooltip>
<Modal open={open}>
  hello
</Modal>

* En este ejemplo el botón de abajo abre el modal.Yo necesitaré que haga esto el botón Share,entre otros.Puede que quiera usar un <Dialog> ya que es un componente más avanzado que el <Modal>

							SNACKBARS

Lo primero es instalar lab(de @material-ui/lab) para poder usar el componente Alert:
>npm i @material-ui/lab
import MuiAlert from '@material-ui/lab/Alert';

function Alert(props) {
  return <MuiAlert elevation={6} variant="filled" {...props} />;
}

  <Snackbar open={openSnack} autoHideDuration={6000}
      anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}
       onClose={handleClose}>
         <Alert onClose={handleClose} severity="success">
           This is a success message!  
         </Alert>
      </Snackbar>
    </>

Es una forma interesante de mandar mensajes.Además que le cambiará el estilo.Puedo usar un estilo para el profile y otro para el Share.

Recuerda que un simple espacio puede darme errores en el archivo .env

				AVATARS AND GROUP AVATARS

1- Puedo crear <Avatar> de diferentes tamaños:
<Avatar alt="Remy Sharp" src="/static/images/avatar/1.jpg" className={classes.small} />
* Simplemente edito esa clase.
2- Puedo crear avatares que sean un icono pasandoselo como hijo:
<Avatar className={classes.green}>
  <AssignmentIcon />
</Avatar>
3- Puedo cambiarles la forma con la propiedad variant
<Avatar variant="square" className={classes.square}>

Pero lo mejor es crear grupos con <AvatarGroup>

AvatarGroup max={4}>
  <Avatar alt="Remy Sharp" src="/static/images/avatar/1.jpg" />
  <Avatar alt="Travis Howard" src="/static/images/avatar/2.jpg" />
  <Avatar alt="Cindy Baker" src="/static/images/avatar/3.jpg" />
  <Avatar alt="Agnes Walker" src="/static/images/avatar/4.jpg" />
  <Avatar alt="Trevor Henderson" src="/static/images/avatar/5.jpg" />
</AvatarGroup>

* Adicionalmente puedo crear avatares con badges:
<StyledBadge
        overlap="circular"
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'right',
        }}
        variant="dot"
      >
        <Avatar alt="Remy Sharp" src="/static/images/avatar/1.jpg" />
      </StyledBadge>
* Hay más que esto.Ver documentación (https://material-ui.com/components/avatars/)

				IMAGE GALLERY

Puedo crear un grupo de imagenes con <ImageList> e <ImageListItem>.Puedo decir las columnas y el alto,etc...

  <ImageList rowHeight={160} className={classes.imageList} 
      cols={2}>
        <ImageListItem>
          <img
            src="https://material-ui.com/static/images/image-list/plant.jpg"
            alt=""
          />
        </ImageListItem>
        <ImageListItem>

		LINK FAB BUTTON

Puedo usar su elemento <Link> para crear enlaces o su elemento <Fab> para crear botones Flotantes CTA
